#include <Arduino.h>
#include "Types.h"
#include "Wire.h"
#include "SerialTransfer.h"
// #include "RingBuf.h"

SerialTransfer myTransfer;
uint32_t nextUpdate, timeToComplete;

// typedef Package MAX31855Packet;

// PackageBuffer<PayloadUnion> packageBuffer;

PackageBuffer<FloatPayload> floatpayloadBuffer;
PackageBuffer<Uint8Payload> uint8payloadBuffer;

// MAX31855Packet buffer[27];

void setup()
{
  // for (uint16_t i = 0; i < 17; i++)
  // {
  //   FloatPayload p;
  //   p.datagramID = Datagram::ADS1256_PT_01;
  //   p.timestamp = millis() + i;
  //   p.value = 1000.0F + i;
  //   // FloatPayload p  = {i, millis(), 1000.0F + i };
  //   // {i, millis(), 1000.0F + i }
  //   packageBuffer.buffer[i] = p;
  // }

  for (uint16_t i = 0; i < 5; i++)
  {
    FloatPayload p;
    p.datagramID = Datagram::INA219_VOLTAGE_DHE;
    p.timestamp = millis() + i;
    // p.value = 1000.0F + i;
    p.value = 1000.0F + i;
    // FloatPayload p  = {i, millis(), 1000.0F + i };
    // {i, millis(), 1000.0F + i }
    floatpayloadBuffer.buffer[i] = p;
  }

  for (uint16_t i = 0; i < 5; i++)
  {
    Uint8Payload p;
    p.datagramID = Datagram::VALVE_STATE_SPV_M1;
    p.timestamp = millis() + i;
    // p.value = 1000.0F + i;
    p.value = 1;
    // FloatPayload p  = {i, millis(), 1000.0F + i };
    // {i, millis(), 1000.0F + i }
    uint8payloadBuffer.buffer[i] = p;
  }

  floatpayloadBuffer.bufferSize = 27 * 9;
  floatpayloadBuffer.errorCode = 0x0;

  uint8payloadBuffer.bufferSize = 27 * 9;
  uint8payloadBuffer.errorCode = 0x1;

  Serial.begin(115200);
  myTransfer.begin(Serial);
  nextUpdate = micros();
  delay(5000);

  // y = 4.5;
}

void loop()
{

  // micros()
  if (micros() >= nextUpdate)
  {

    // Serial.print("FloatPayload: ");
    // Serial.println(sizeof(FloatPayload));

    // Serial.print("Uint8Payload: ");
    // Serial.println(sizeof(Uint8Payload));

    // Serial.print("Uint16Payload: ");
    // Serial.println(sizeof(Uint16Payload));

    // Serial.print("Uint32Payload: ");
    // Serial.println(sizeof(Uint32Payload));

    // Serial.println();
    // Serial.println();

    // Serial.println(sizeof(SensorPackage));
    // timeToComplete = micros();

    for (size_t i = 0; i < 1; i++)
    {
      uint8_t sizeFloat = myTransfer.sendDatum(floatpayloadBuffer);
      uint8_t sizeUint8 = myTransfer.sendDatum(uint8payloadBuffer);
      // Serial.println(size);
    }

    // timeToComplete = micros() - timeToComplete;
    // Serial.print("\nTotal:");
    // Serial.print(timeToComplete);
    // Serial.print(" : size: ");
    // Serial.print(sizeof(SensorPackage));
    // Serial.print(" : sended size: ");
    // Serial.println(size);
    nextUpdate = micros() + 1000000;
    // nextUpdate = micros() + 250000;
  }
  // delay(100);
}